{"version":3,"sources":["img/quiz.png","assests/sounds/Correct.mp3","assests/sounds/Clicking.mp3","assests/sounds/Error.mp3","components/Home.js","components/quiz/QuizInstructions.js","utils/is-empty.js","components/quiz/Play.js","components/quiz/QuizSummary.js","App.js","index.js"],"names":["module","exports","Home","Helmet","className","style","textAlign","to","id","QuizInstructions","classname","src","img","alt","float","isEmpty","value","undefined","Object","keys","length","trim","Play","props","displayQuestions","questions","state","curentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","answer","setState","numberOfAnsweredQuestions","prevRandomNumbers","showOptions","handleDisableButton","handleOption","e","target","innerHTML","toLowerCase","setTimeout","document","getElementById","play","correctAnswer","wrongAnswer","handleNextButton","playButtonSound","prevState","handlePrevButton","handleQuiteButton","window","confirm","history","push","handleButtonClick","M","toast","html","classes","displayLength","wrongAnswers","endQuiz","navigator","vibrate","score","correctAnswers","Array","from","querySelectorAll","forEach","option","visibility","usedFiftyfifty","handleHints","hints","indexOfAnswer","options","index","randomNumber","Math","round","random","includes","concat","handleFiftyFifty","fiftyfifty","randomNumbers","count","newRandomNumber","startTimer","counDownTime","Date","now","ineterval","setInterval","distance","minutes","floor","seconds","clearInterval","time","prevButtonDisable","numberOfQuestions","nextButtonDisabled","alert","playStarts","componentDidMount","usedHints","this","Correct","Wrong","Clicking","onClick","question","optionA","optionB","optionC","optionD","classNames","Component","QuizSummary","usedFiftyFifty","location","stats","remark","userScore","App","path","exact","component","ReactDOM","render","StrictMode"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,2uFCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,yKCsD5BC,EAhCF,kBACV,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,KAAQ,+CAER,yBAAKC,UAAU,QACZ,iCAEI,yBAAKC,MAAO,CAACC,UAAU,WACpB,kBAAC,IAAD,CAAWF,UAAU,UAExB,wBAAIA,UAAW,WAAf,oBACA,yBAAKA,UAAY,sBACb,4BAEI,4BAAI,kBAAC,IAAD,CAAMA,UAAU,WAAWG,GAAG,sBAA9B,WAIX,yBAAKH,UAAU,kBAGV,kBAAC,IAAD,CAAMG,GAAG,SAASH,UAAU,YAAYI,GAAG,aAA3C,SACA,kBAAC,IAAD,CAAMD,GAAG,YAAYH,UAAU,YAAYI,GAAG,gBAA9C,iB,iBC/BL,SAASC,IACpB,OACI,kBAAC,WAAD,CAAUL,UAAU,OAEf,yBAAKC,MAAO,CAACC,UAAU,WACnB,kBAAC,IAAD,CAAqBF,UAAU,UAGpC,kBAACD,EAAA,EAAD,KAAQ,qDACR,yBAAKC,UAAU,yBACX,wBAAIA,UAAU,YAAd,6BACA,6BACA,uBAAGM,UAAU,SAASL,MAAO,CAACC,UAAU,WAAxC,0CAGH,wBAAIF,UAAU,WACX,2FACI,uHACA,kGACA,iFACA,uEACA,wEACA,oHACA,6BACA,2CAEP,6BACD,yBAAKO,IAAKC,IAAKC,IAAI,SAlBnB,KAuBA,yBAAKT,UAAU,kBACX,0BAAMA,UAAU,OAAOC,MAAO,CAACS,MAAO,SAAS,kBAAC,IAAD,CAAMP,GAAG,IAAIH,UAAU,YAAWI,GAAG,aAArC,iBAC/C,0BAAMJ,UAAU,QAAQC,MAAO,CAACS,MAAO,UAAU,kBAAC,IAAD,CAAMP,GAAG,aAAaH,UAAU,YAAWI,GAAG,gBAA9C,sB,sFCrClDO,EANC,SAACC,GAAD,YACNC,IAAVD,GACS,MAATA,GACkB,kBAAVA,GAAoD,IAA9BE,OAAOC,KAAKH,GAAOI,QAC/B,kBAAVJ,GAA6C,IAAtBA,EAAMK,OAAOD,Q,mDC0iB7BE,E,kDAzhBZ,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA0CVC,iBAAmB,WAKlB,IAJGC,EAIJ,uDAJgB,EAAKC,MAAMD,UACvBE,EAGJ,uCAFIC,EAEJ,uCADIC,EACJ,uCACSC,EAAwB,EAAKJ,MAA7BI,qBAGL,IAAIf,EAAQ,EAAKW,MAAMD,WAAW,CAIjCE,GADAF,EAAU,EAAKC,MAAMD,WACIK,GACzBF,EAAaH,EAAUK,EAAqB,GAC5CD,EAAiBJ,EAAUK,EAAqB,GAEhD,IAAMC,EAASJ,EAAeI,OAG9B,EAAKC,SAAS,CACVL,iBACAC,eACAC,mBACAI,0BAA0BR,EAAUL,OACpCW,SACAG,kBAAkB,KAGnB,WACC,EAAKC,cACL,EAAKC,2BA1EK,EAmFnBC,aAAa,SAACC,GACXA,EAAEC,OAAOC,UAAUC,gBAAkB,EAAKf,MAAMK,OAAOU,eACzDC,YAAW,WACPC,SAASC,eAAe,iBAAiBC,SAC1C,KAEH,EAAKC,kBAELJ,YAAW,WACPC,SAASC,eAAe,eAAeC,SACxC,KAEH,EAAKE,gBA/Fa,EAoGnBC,iBAAkB,WACd,EAAKC,uBAG2BhC,IAA5B,EAAKS,MAAME,cAEd,EAAKI,UAAS,SAAAkB,GAAS,MAAI,CACvBpB,qBAAqBoB,EAAUpB,qBAAsB,MACrD,WACA,EAAKN,iBACD,EAAKE,MAAMA,MACX,EAAKA,MAAMC,eACX,EAAKD,MAAME,aACX,EAAKF,MAAMG,sBAjHL,EAuHnBsB,iBAAkB,WACjB,EAAKF,uBAG+BhC,IAAhC,EAAKS,MAAMG,kBACd,EAAKG,UAAS,SAAAkB,GAAS,MAAI,CACvBpB,qBAAqBoB,EAAUpB,qBAAsB,MACrD,WACA,EAAKN,iBACD,EAAKE,MAAMA,MACX,EAAKA,MAAMC,eACX,EAAKD,MAAME,aACX,EAAKF,MAAMG,sBAnIF,EAyIlBuB,kBAAmB,WACf,EAAKH,kBAEJI,OAAOC,QAAQ,kCAEZ,EAAK/B,MAAMgC,QAAQC,KAAK,MA9Id,EAqJnBC,kBAAoB,SAACnB,GAEpB,OAAOA,EAAEC,OAAO/B,IACZ,IAAK,UACD,EAAKwC,mBACL,MACJ,IAAK,WACD,EAAKG,mBACL,MACJ,IAAK,WACD,EAAKC,oBAMb,EAAKH,mBArKa,EAyKnBA,gBAAiB,WAChBN,SAASC,eAAe,eAAeC,QA1KrB,EA+KnBC,cAAgB,WACfY,IAAEC,MAAM,CACJC,KAAO,mBACPC,QAAS,cACTC,cAAc,OAIlB,EAAK9B,UAAS,SAAAkB,GAAS,MAAK,CAExBa,aAAab,EAAUa,aAAa,EACpCjC,qBAAsBoB,EAAUpB,qBAAqB,EACrDG,0BAA2BiB,EAAUjB,0BAA0B,MAChE,gBAEgChB,IAA5B,EAAKS,MAAME,aAEV,EAAKoC,UAGL,EAAKxC,iBACD,EAAKE,MAAMD,UACX,EAAKC,MAAMC,eACX,EAAKD,MAAME,aACX,EAAKF,MAAMG,sBAvML,EAgNnBkB,YAAc,WACbkB,UAAUC,QAAQ,KAClBR,IAAEC,MAAM,CACJC,KAAO,iBACPC,QAAS,gBACTC,cAAc,OAGlB,EAAK9B,UAAS,SAAAkB,GAAS,MAAK,CACxBiB,MAAMjB,EAAUiB,MAAM,EACtBC,eAAelB,EAAUkB,eAAe,EACxCtC,qBAAsBoB,EAAUpB,qBAAqB,EACrDG,0BAA2BiB,EAAUjB,0BAA0B,MAChE,gBAEgChB,IAA5B,EAAKS,MAAME,aACV,EAAKoC,UAGL,EAAKxC,iBACD,EAAKE,MAAMD,UACX,EAAKC,MAAMC,eACX,EAAKD,MAAME,aACX,EAAKF,MAAMG,sBAvOL,EA8OnBM,YAAc,WACGkC,MAAMC,KAAK3B,SAAS4B,iBAAiB,YAC7CC,SAAQ,SAAAC,GAEZA,EAAOpE,MAAMqE,WAAa,aAG9B,EAAK1C,SAAS,CAEV2C,gBAAgB,KAvPF,EA6PnBC,YAAa,WAET,GAAG,EAAKlD,MAAMmD,MAAM,EAAE,CACrB,IAGIC,EAHEC,EAAUV,MAAMC,KAAK3B,SAAS4B,iBAAiB,YAKrDQ,EAAQP,SAAQ,SAACC,EAAOO,GACjBP,EAAOjC,UAAUC,gBAAkB,EAAKf,MAAMK,OAAOU,gBACpDqC,EAAgBE,MAKxB,IAbqB,iBAcjB,IAAMC,EAAeC,KAAKC,MAAoB,EAAdD,KAAKE,UAErC,OAAGH,IAAiBH,GAAkB,EAAKpD,MAAMQ,kBAAkBmD,SAASJ,GAkBzE,EAAKvD,MAAMQ,kBAAkBd,QAAS,EAAG,aAA5C,GAjBI2D,EAAQP,SAAQ,SAACC,EAAOO,GACdA,IAAUC,IAEVR,EAAOpE,MAAMqE,WAAa,SAG1B,EAAK1C,UAAS,SAACkB,GAAD,MAAe,CACzB2B,MAAO3B,EAAU2B,MAAM,EACvB3C,kBAAmBgB,EAAUhB,kBAAkBoD,OAAOL,WAMpE,YAlBI,kBAqBoC,SAjSlC,EA0SnBM,iBAAkB,WAGd,GAAG,EAAK7D,MAAM8D,WAAW,IAAkC,IAA7B,EAAK9D,MAAMiD,eAAwB,CAC7D,IAEIG,EAFEC,EAAQpC,SAAS4B,iBAAiB,WAClCkB,EAAe,GAGrBV,EAAQP,SAAQ,SAACC,EAAOO,GACjBP,EAAOjC,UAAUC,gBAAkB,EAAKf,MAAMK,OAAOU,gBACrDqC,EAAgBE,MAIvB,IAAIU,EAAO,EACX,EAAE,CAED,IAAMT,EAAeC,KAAKC,MAAoB,EAAdD,KAAKE,UAGrC,GAAGH,IAAiBH,EAChB,GAAGW,EAAcrE,OAAO,IAAMqE,EAAcJ,SAASJ,KAAkBQ,EAAcJ,SAASP,GAC1FW,EAAcjC,KAAKyB,GACnBS,SAEA,OAAW,CACP,IAAMC,EAAkBT,KAAKC,MAAoB,EAAdD,KAAKE,UACxC,IAAIK,EAAcJ,SAASM,KAAqBF,EAAcJ,SAASP,GAAe,CAClFW,EAAcjC,KAAKmC,GACnBD,IACA,cAOVA,EAAM,GACbX,EAAQP,SAAQ,SAACC,EAAQO,GACjBS,EAAcJ,SAASL,KACtBP,EAAOpE,MAAMqE,WAAY,aAIlC,EAAK1C,UAAS,SAAAkB,GAAS,MAAK,CACxBsC,WAAWtC,EAAUsC,WAAW,EAChCb,gBAAgB,QAxVT,EA6VnBiB,WAAW,WACP,IAAMC,EAAeC,KAAKC,MAAO,KACjC,EAAKC,UAAWC,aAAY,WACxB,IAAMF,EAAM,IAAID,KACVI,EAAWL,EAAeE,EAE1BI,EAAUjB,KAAKkB,MAAOF,EAAS,KAAV,KACrBG,EAAUnB,KAAKkB,MAAOF,EAAS,IAAY,KAE9CA,EAAS,GACXI,cAAc,EAAKN,WACnB,EAAKhE,SAAS,CACVuE,KAAK,CACDJ,QAAQ,EACRE,QAAQ,KAGb,WAEC,EAAKrC,cAIN,EAAKhC,SAAU,CACXuE,KAAK,CACDJ,UACAE,eAKb,MA5XY,EAgYnBjE,oBAAsB,gBAEiBnB,IAA/B,EAAKS,MAAMG,kBAAoE,IAAnC,EAAKH,MAAMI,qBACvD,EAAKE,SAAS,CACVwE,mBAAmB,IAI1B,EAAKxE,SAAS,CACVwE,mBAAmB,SAKQvF,IAA5B,EAAKS,MAAME,cAA8B,EAAKF,MAAMI,qBAAqB,IAAM,EAAKJ,MAAM+E,kBAC7F,EAAKzE,SAAS,CACV0E,oBAAoB,IAI3B,EAAK1E,SAAS,CACV0E,oBAAoB,KArZP,EA2ZnB1C,QAAS,WAEL2C,MAAM,oBAFI,IAGHjF,EAHG,eAGHA,MAGDkF,EAAa,CACfzC,MAAMzC,EAAMyC,MACZsC,kBAAkB/E,EAAMmF,kBACxB5E,0BAA0BP,EAAMO,0BAChCmC,eAAgB1C,EAAM0C,eACtBL,aAAcrC,EAAMqC,aACpBY,eAAiB,EAAEjD,EAAM8D,WACzBsB,UAAW,EAAEpF,EAAMmD,OAKvBnC,YAAW,WACN,EAAKnB,MAAMgC,QAAQC,KAAK,oBAAqBoD,KAC/C,MA3aN,EAAKlF,MAAQ,CACTD,YACAE,eAAe,GACfC,aAAa,GACbC,iBAAiB,GACjBE,OAAO,GACP0E,kBAAkB,GAClBxE,0BAA0B,EAC1BH,qBAAqB,EACrBqC,MAAM,EACNC,eAAe,EACfL,aAAa,EACbc,MAAM,EACNW,WAAW,EACXb,gBAAgB,EAChB+B,oBAAoB,EACpBF,mBAAmB,EACnBtE,kBAAkB,GAClBqE,KAAK,IAGN,EAAKP,UAAW,KAzBD,E,gEA4BA,MAEqDe,KAAKrF,MAAjED,EAFO,EAEPA,UAAWE,EAFJ,EAEIA,eAAeC,EAFnB,EAEmBA,aAAaC,EAFhC,EAEgCA,iBAE/CkF,KAAKvF,iBAAiBC,EAAUE,EAAgBC,EAAcC,GAC9DkF,KAAKnB,e,6CAKRU,cAAcS,KAAKf,a,+BA6YT,IAAD,EAUDe,KAAKrF,MAPLC,EAHC,EAGDA,eACAG,EAJC,EAIDA,qBACA2E,EALC,EAKDA,kBACA5B,EANC,EAMDA,MACAW,EAPC,EAODA,WACAe,EARC,EAQDA,KAGJ,OAaI,kBAAC,WAAD,KACI,kBAACpG,EAAA,EAAD,KAAQ,6CACZ,kBAAC,WAAD,KAEQ,2BAAOK,GAAG,gBAAgBG,IAAKqG,MAC/B,2BAAOxG,GAAG,cAAcG,IAAKsG,MAC7B,2BAAOzG,GAAG,cAAcG,IAAKuG,OAGjC,yBAAK9G,UAAU,aACX,yCAGA,yBAAKA,UAAU,sBAEX,2BACI,kBAAC,IAAD,CAAa+G,QAASJ,KAAKxB,iBAAkBnF,UAAU,aACtDoF,GAIL,2BACI,kBAAC,IAAD,CAAW2B,QAASJ,KAAKnC,YAAaxE,UAAU,UAAsByE,IAM9E,6BACI,uBAAGzE,UAAU,mBAEb,0BAAMA,UAAU,OAAOC,MAAO,CAACS,MAAO,SAAUgB,EAAsB,EAAtE,OAA6E2E,GACzE,0BAAMrG,UAAU,QAAQC,MAAO,CAACS,MAAO,UAAWyF,EAAKJ,QAAvD,IAAiEI,EAAKF,QAAQ,8BAAM,kBAAC,IAAD,UAK5F,4BAAK1E,EAAeyF,UAGpB,yBAAKhH,UAAU,qBACV,uBAAG+G,QAASJ,KAAK1E,aAAcjC,UAAU,UAAUuB,EAAe0F,SAClE,uBAAGF,QAASJ,KAAK1E,aAAcjC,UAAU,UAAUuB,EAAe2F,UAEvE,yBAAKlH,UAAU,qBACV,uBAAG+G,QAASJ,KAAK1E,aAAcjC,UAAU,UAAUuB,EAAe4F,SAClE,uBAAGJ,QAASJ,KAAK1E,aAAcjC,UAAU,UAAUuB,EAAe6F,UAIvE,yBAAKpH,UAAU,oBACX,4BACAA,UAAYqH,IAAW,GAAG,CAAC,QAAUV,KAAKrF,MAAM8E,oBAChDhG,GAAG,WACH2G,QAAUJ,KAAKtD,mBAHf,YAOA,4BACArD,UAAYqH,IAAW,GAAG,CAAC,QAAUV,KAAKrF,MAAMgF,qBAChDlG,GAAG,UACH2G,QAAUJ,KAAKtD,mBAHf,QAOA,4BACAjD,GAAG,WACH2G,QAAUJ,KAAKtD,mBAFf,e,GA9gBLiE,aCiHJC,E,kDA/HX,WAAapG,GAAO,IAAD,8BACf,cAAMA,IACDG,MAAO,CACRyC,MAAM,EACNsC,kBAAkB,EAClBxE,0BAA0B,EAC1BmC,eAAe,EACfL,aAAa,EACb+C,UAAU,EACVc,eAAe,GATJ,E,gEAenB,MAG4Bb,KAAKxF,MAAMsG,SAA3BnG,EAHZ,EAGYA,MAHZ,EAGmByC,MACf4C,KAAK/E,SAAS,CAEVmC,MAAQzC,EAAMyC,MAAQzC,EAAM+E,kBAAoB,IAChDA,kBAAkB/E,EAAM+E,kBACxBxE,0BAA0BP,EAAMO,0BAChCmC,eAAgB1C,EAAM0C,eACtBL,aAAcrC,EAAMqC,aACpB+C,UAAUpF,EAAMoF,UAChBc,eAAelG,EAAMkG,mB,+BAGpB,IAIDE,EAAMC,EAJL,EAGmBhB,KAAKxF,MAAMsG,SAA3BnG,EAHH,EAGGA,MAEFsG,GALD,EAGU7D,MAEG4C,KAAKrF,MAAMyC,OAgF7B,OA7EI6D,GAAY,GACZD,EAAQ,0BACFC,EAAW,IAAMA,GAAa,GACpCD,EAAQ,qBACFC,GAAW,IAAMA,EAAU,GACjCD,EAAQ,qBACHC,GAAa,IAAMA,GAAW,GACnCD,EAAQ,iBACFC,EAAW,KACjBD,EAAQ,aAOTD,OADS7G,IAATS,EAEI,kBAAC,WAAD,KACG,yBAAKrB,MAAO,CAACC,UAAU,WACxB,kBAAC,IAAD,CAASF,UAAU,aAGrB,wBAAIA,UAAU,WAAd,oBAEA,yBAAKA,UAAW,aAGpB,4BAAK2H,GAGL,8CACA,yBAAKrH,UAAU,QACf,0BAAMN,UAAU,aAAhB,8BACA,0BAAMA,UAAU,SAAhB,MACA,6BACA,0BAAMA,UAAU,aAAhB,uCACA,0BAAMA,UAAU,SAAS2G,KAAKrF,MAAMO,0BAA0B,GAC9D,6BACA,0BAAM7B,UAAU,MAAhB,oCACA,0BAAMA,UAAU,SAAS2G,KAAKrF,MAAM0C,gBACpC,6BACA,0BAAMhE,UAAU,aAAhB,kCACA,0BAAMA,UAAU,SAAS2G,KAAKrF,MAAMqC,eAEtC,6BACM,4BACI,4BACI,kBAAC,IAAD,CAAM3D,UAAU,OAAQC,MAAO,CAACS,MAAO,QAASP,GAAG,KAAnD,iBAEJ,4BACI,kBAAC,IAAD,CAAMH,UAAU,QAAQC,MAAO,CAACS,MAAO,SAASP,GAAG,cAAnD,mBAYR,iCACA,wBAAIH,UAAU,YAAd,uBACA,4BACI,4BACI,kBAAC,IAAD,CAAMG,GAAG,KAAT,iBAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,cAAT,iBAWX,kBAAC,WAAD,KACI,kBAACJ,EAAA,EAAD,KAAQ,sDACP2H,O,GAzHSJ,aCeXO,MAdf,WACE,OAEE,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAYlI,IAClC,kBAAC,IAAD,CAAOgI,KAAK,qBAAqBC,OAAK,EAACC,UAAY3H,IACnD,kBAAC,IAAD,CAAOyH,KAAK,aAAaC,OAAK,EAACC,UAAY9G,IAC3C,kBAAC,IAAD,CAAO4G,KAAK,oBAAoBC,OAAK,EAACC,UAAYT,MCV3DU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5F,SAASC,eAAe,W","file":"static/js/main.9e15288b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/quiz.f6c13b4b.png\";","module.exports = __webpack_public_path__ + \"static/media/Correct.02882ce2.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Clicking.a1cfcb1e.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Error.6721d280.mp3\";","import React, { Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\n\n\n//font awesome icons\nimport { FaMedapps } from 'react-icons/fa';\n\n\n\n\n/*\nThis functional component is the main page of the quiz app\nThings I used,\n1. Fragments - to group a list of children without adding extra nodes to the DOM.\n2. React Helmet - to manage the document head. \nIt works in a browser and supports rendering on a server,\n dynamically set the page title, language, and metadata\n\n Most of the div tags have classnames for styling purposes\n*/\n\nconst Home = () => (\n   <Fragment>\n       <Helmet><title>Quiz - Home</title></Helmet>\n      \n       <div className=\"home\">\n          <section>\n             {/**bulp icon in the main page */}\n              <div style={{textAlign:\"center\"}}>\n                 <FaMedapps className=\"bulb\"></FaMedapps>\n              </div>\n              <h1 className =\"main-h1\">General Quiz App</h1>\n              <div className = \"play-btn-container\">\n                  <ul>\n                      {/*This link allows users to  go to the instruction page*/}\n                      <li><Link className=\"play-btn\" to=\"/play/instructions\">Play</Link></li> \n                  </ul>\n               </div>\n               {/*container of login and register buttons */}\n               <div className=\"auth-container\">\n\n                    {/*These links allow users to  go to the Login and Register pages */}\n                    <Link to=\"/login\" className=\"auth-btns\" id=\"login-btn\">Login</Link>\n                    <Link to=\"/register\" className=\"auth-btns\" id=\"register-btn\">Register</Link>\n\n               </div>\n               \n          </section>\n       </div>\n   </Fragment>\n    \n)\n\nexport default Home;","import React, { Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\n//import imgs\nimport img from '../../img/quiz.png';\n\n//import font awesome icons \nimport{ FaExclamationCircle } from 'react-icons/fa';\n\n\n//this is afuntional based component for dispaying the instructions\n//user can start the quiz by clicking the  start button or can go back to the home page\n\nexport default function QuizInstructions() {\n    return (\n        <Fragment className=\"sum\">\n\n             <div style={{textAlign:\"center\"}}>\n                 <FaExclamationCircle className=\"inst\"></FaExclamationCircle>\n              </div>\n            \n            <Helmet><title>Quiz Instructions</title></Helmet>\n            <div className=\"instructins-container\">\n                <h1 className=\"instr-h1\">How to Play the Quiz Game</h1>\n                <br/>\n                <p classname=\"inst-p\" style={{textAlign:'center'}}>Please read before you start the quiz.</p>\n                \n                   \n             <ul className=\"inst-ul\"> \n                <li>1.This quiz has a duration of 15 minutes and 15 quections. </li>\n                    <li>2.Each quection has 5 options you need to select most appropriate option as the answer.</li>\n                    <li>3.make sure you complete all the quections before the time elapes.</li>\n                    <li>4.You have two 50-50 chances to select the answer</li>\n                    <li>5.You have 5 hints to select the answer</li>\n                    <li>6.You have 3 minutes tp complete a quiz.</li>\n                    <li>7.You can start the quiz now by clicking on Start button or go back to the Home page</li>\n                    <br/>\n                    <h2>Good Luck!</h2>\n             </ul>\n             <br/>\n            <img src={img} alt=\"Logo\" />;\n            </div>\n            \n            {/*This div is for the footer of the page including 2 buttons to \n            go back to the main quiz page and other button is to start the game */}\n            <div className=\"auth-container\">\n                <span className=\"left\" style={{float: 'left'}}><Link to=\"/\" className=\"auth-btns\"id=\"login-btn\">Take me back</Link></span>\n                <span className=\"right\" style={{float: 'right'}}><Link to=\"/play/quiz\" className=\"auth-btns\"id=\"register-btn\">Start the quiz!</Link></span>\n            </div>\n        </Fragment>\n    )\n}\n","\n//this will check  values in the jason file with akey - value paire and check if the value is empty\n// this funtion will return treu/false\n\nconst isEmpty = (value ) => \nvalue === undefined ||\nvalue == null ||\n(typeof value === 'object' && Object.keys(value).length === 0 )||\n(typeof value === 'string'  && value.trim().length===0);\n\nexport default isEmpty;\n","import React, { Component, Fragment } from 'react';\nimport { Helmet } from 'react-helmet';\nimport classNames from 'classnames';\nimport M from 'materialize-css';\n\n//font awesome icons\nimport { FaRegClock } from 'react-icons/fa';\nimport { FaAllergies } from 'react-icons/fa';\nimport { FaMedapps } from 'react-icons/fa';\n\n//question and answers json file\nimport questions from'../../questions.json';\n\n//components\nimport isEmpty from '../../utils/is-empty';\n\n//audio clips\nimport Correct from '../../assests/sounds/Correct.mp3';\nimport Clicking from '../../assests/sounds/Clicking.mp3';\nimport Wrong from '../../assests/sounds/Error.mp3';\n\n{/*This is a class based component for handling main functions in the quiz app */}\n\nclass Play extends Component {\n\n   constructor(props) {\n       super(props);\n    \n       //setting the initial values for the attriutes\n    this.state = {\n        questions,\n        curentQuestion:{},\n        nextQuestion:{},\n        previousQuestion:{},\n        answer:'',\n        numberOfQuestions:15,\n        numberOfAnsweredQuestions:0,\n        currentQuestionIndex:0,\n        score:0,\n        correctAnswers:0,\n        wrongAnswers:0,\n        hints:5,\n        fiftyfifty:2,\n        usedFiftyfifty: false,\n        nextButtonDisabled: false,\n        prevButtonDisable: true,\n        prevRandomNumbers:[],\n        time:{}\n            \n       };\n       this.ineterval =null\n   }\n    //This method calls whenever this class component has being called\n   componentDidMount(){\n       //destructoring the state\n       const { questions, curentQuestion,nextQuestion,previousQuestion } = this.state;\n\n       this.displayQuestions(questions,curentQuestion, nextQuestion, previousQuestion);\n       this.startTimer();\n   }\n\n   // Runs when or before a component get unmounted.\n   componentWillUnmount(){\n    clearInterval(this.ineterval);\n   }\n\n   //This function will handle the question.json fle to render the questions with 4 options\n   // Passing properities (questions,curentQuestion,nextQuestion,previousQuestion)\n   displayQuestions = (\n       questions = this.state.questions, \n       curentQuestion,\n       nextQuestion,\n       previousQuestion) => \n   {\n       let {currentQuestionIndex} = this.state;\n\n       //check if there are no quections lefts(end of the game)\n       if(!isEmpty(this.state.questions)){\n\n        //if not, setting the current values to the passes props\n        questions=this.state.questions;\n        curentQuestion=questions[currentQuestionIndex];\n        nextQuestion=questions[currentQuestionIndex+1];\n        previousQuestion=questions[currentQuestionIndex-1];\n\n        const answer = curentQuestion.answer;\n\n        //Setting the current values to the props by changing the state of the properties (because this is a class based component)\n        this.setState({\n            curentQuestion,\n            nextQuestion,\n            previousQuestion,\n            numberOfAnsweredQuestions:questions.length, \n            answer,\n            prevRandomNumbers:[]\n\n            //callback function to call showOptions() and handleDisabledButton() methods\n        }, () => {\n            this.showOptions();\n            this.handleDisableButton();\n        });\n         \n\n       }\n   };\n\n   //This function handles and give different sounds for wrong and right ansers by\n   //assiging simple audio clips\n   handleOption=(e)=>{\n   if(e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()){\n    setTimeout(() => {\n        document.getElementById('correct-sound').play();   \n    }, 500);\n    \n    this.correctAnswer();\n   }else{\n    setTimeout(() => {\n        document.getElementById('wrong-sound').play();   \n    }, 500);\n    \n    this.wrongAnswer();\n   }\n   };\n\n   //This function will take user to the next quesstion\n   handleNextButton =() => {\n       this.playButtonSound();\n\n        //check if there are no quections lefts(end of the game)\n       if (this.state.nextQuestion !== undefined){\n           //if there are questions, update the remaing number of questions and answered questions\n        this.setState(prevState =>({\n            currentQuestionIndex:prevState.currentQuestionIndex +1,\n        }), () =>{\n            this.displayQuestions(\n                this.state.state, \n                this.state.curentQuestion, \n                this.state.nextQuestion, \n                this.state.previousQuestion);\n        });\n       }\n    };\n\n    //This function will take user to the previous quesstion\n   handlePrevButton =() => {\n    this.playButtonSound();\n\n      //check if there are no quections before(Start of the game)\n    if (this.state.previousQuestion !== undefined){\n     this.setState(prevState =>({\n         currentQuestionIndex:prevState.currentQuestionIndex -1,\n     }), () =>{\n         this.displayQuestions(\n             this.state.state, \n             this.state.curentQuestion, \n             this.state.nextQuestion, \n             this.state.previousQuestion);\n     });\n    }\n    };\n\n    //This function will alow user to exit the game and take to the home page\n    handleQuiteButton =() => {\n        this.playButtonSound();\n        \n      if(window.confirm('Are you sure you want to quit')){\n            //this will take to the home page (default)\n            this.props.history.push('/');\n     }\n\n    }\n\n   //checks what button is being clicked by a switch statement \n   //and calls the matching funtion for each button click\n   handleButtonClick = (e) =>{\n\n    switch(e.target.id){\n        case 'nxt-btn':\n            this.handleNextButton();\n            break;\n        case 'prev-btn':\n            this.handlePrevButton();\n            break;\n        case 'quit-btn':\n            this.handleQuiteButton();\n            break;\n        default:\n            break;\n\n    }\n    this.playButtonSound();\n   };\n\n   //Giving button click sounds\n   playButtonSound =() =>{\n    document.getElementById('click-sound').play();   \n\n   };\n\n   //When the user hits a correct anser, a pop-up message will be appeared.\n   correctAnswer = () =>{\n    M.toast({\n        html : 'Correct Answer!!',\n        classes: 'toast-valid',\n        displayLength:1500\n    });\n\n    //updtating the state values\n    this.setState(prevState => ({\n     \n        wrongAnswers:prevState.wrongAnswers+1,\n        currentQuestionIndex: prevState.currentQuestionIndex+1,\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions+1\n    }),() => {\n        //check whether the user has come to the last question\n        if(this.state.nextQuestion === undefined){\n            //if yes, calls the endQuiz() methos\n            this.endQuiz();\n        }else{\n            //otherwise display the next question\n            this.displayQuestions(\n                this.state.questions, \n                this.state.curentQuestion, \n                this.state.nextQuestion, \n                this.state.previousQuestion);\n    \n        }\n\n       \n    });\n   }\n\n   //When the user hits a wrong answer, a pop-up message will be appeared.\n   wrongAnswer = () =>{\n    navigator.vibrate(1000);   \n    M.toast({\n        html : 'Wrong Answer!!',\n        classes: 'toast-invalid',\n        displayLength:1500\n    });\n     //updtating the state values\n    this.setState(prevState => ({\n        score:prevState.score+1,\n        correctAnswers:prevState.correctAnswers+1,\n        currentQuestionIndex: prevState.currentQuestionIndex+1,\n        numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions+1\n    }),() => {\n        //check whether the user has come to the last question\n        if(this.state.nextQuestion === undefined){\n            this.endQuiz();\n        }else{\n            //otherwise display the next question\n            this.displayQuestions(\n                this.state.questions, \n                this.state.curentQuestion, \n                this.state.nextQuestion, \n                this.state.previousQuestion);\n    \n        }\n       });\n   }\n\n   //This will handle the 4 options for each question\n   showOptions = () =>{\n    const options = Array.from(document.querySelectorAll('.option'));\n    options.forEach(option => {\n        //by default evey option is visible\n        option.style.visibility = 'visible';\n\n    });\n    this.setState({\n        //by default user has not used any fifty-fifty options\n        usedFiftyfifty: false\n    })\n\n   } \n\n   //This is tohandle hinst (bulp icon right side of the quiz)\n   handleHints =() => {\n       //check if there are reaming hints\n       if(this.state.hints>0){\n        const options = Array.from(document.querySelectorAll('.option'));\n        \n        //gets the index\n        let indexOfAnswer;\n  \n        options.forEach((option,index) => {\n            if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()){\n                indexOfAnswer = index;\n            }\n        });\n\n        //generating random numbers to hide wrong answers\n        while(true) {\n            const randomNumber = Math.round(Math.random()*3);\n            //Make sure if the random number is equal to the index of the correct answer \n            if(randomNumber !== indexOfAnswer && !this.state.prevRandomNumbers.includes(randomNumber)){\n                options.forEach((option,index) => {\n                      if (index === randomNumber){\n                          //if its not the index of the correct answer, that option will be hidden\n                          option.style.visibility = 'hidden';\n\n                          //after user uses a hint,the number of hints will be deducted\n                          this.setState((prevState) =>({\n                              hints: prevState.hints-1,\n                              prevRandomNumbers: prevState.prevRandomNumbers.concat(randomNumber)\n      \n                          }) );\n                      }\n                      \n                });\n                break;\n            }\n            //After hiding 3 options for one question, hiding will stop\n            if(this.state.prevRandomNumbers.length >=3) break;\n  \n        }\n\n       }\n   \n   }\n\n   //This function is tohandle 50-50 option to selsct answers\n   handleFiftyFifty =() =>{\n\n        //check if there are remaining 50-50 options. By default users has 2 options for a game\n       if(this.state.fiftyfifty>0 && this.state.usedFiftyfifty ===false){\n           const options=document.querySelectorAll('.option');\n           const randomNumbers =[];\n           let indexOfAnswer;\n\n           options.forEach((option,index) => {\n               if(option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()){\n                  indexOfAnswer = index;  \n               }\n           });\n\n           let count =0;\n           do{\n               //generating a random number\n            const randomNumber = Math.round(Math.random()*3);\n\n              //Make sure if the random number is equal to the index of the correct answer \n            if(randomNumber !== indexOfAnswer){\n                if(randomNumbers.length<2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)){\n                    randomNumbers.push(randomNumber);\n                    count++;\n                }else{\n                    while(true){\n                        const newRandomNumber = Math.round(Math.random()*3);\n                        if(!randomNumbers.includes(newRandomNumber) && !randomNumbers.includes(indexOfAnswer)){\n                            randomNumbers.push(newRandomNumber);\n                            count++;\n                            break;\n                        }\n                    }\n                }\n\n            }\n            // Oalow users to use 50-50 ony 2 times\n           }while(count<2);\n           options.forEach((option, index) => {\n                if(randomNumbers.includes(index)){\n                    option.style.visibility ='hidden';\n                }\n           });\n           //after user uses a hint,the number of 50-50 options will be deducted\n           this.setState(prevState => ({\n               fiftyfifty:prevState.fiftyfifty-1,\n               usedFiftyfifty: true\n           }))\n       }\n   }\n   //User has 3 mins for a game. this funtion will handle a countdown timer\n   startTimer=() => {\n       const counDownTime = Date.now() +180000;\n       this.ineterval =setInterval(()=> {\n           const now = new Date();\n           const distance = counDownTime - now;\n\n           const minutes = Math.floor((distance%(1000*60*60))/(1000*60));\n           const seconds = Math.floor((distance%(1000*60))/(1000));\n           //timesup\n           if(distance<0){\n            clearInterval(this.ineterval);\n            this.setState({\n                time:{\n                    minutes:0,\n                    seconds:0\n\n                }\n            }, () => {\n                //after the time is up, endQuiz() method will be called\n                this.endQuiz();\n            });\n           } else{\n               //setting the current time\n               this.setState ({\n                   time:{\n                       minutes,\n                       seconds\n                   }\n               })\n           }\n\n       }, 1000)\n   }\n\n   //this function is to disable clicks on button when needded\n   handleDisableButton = () =>{\n       //At the begining of the quiz, the previos button is disabled\n       if (this.state.previousQuestion ===undefined || this.state.currentQuestionIndex ===0){\n           this.setState({\n               prevButtonDisable: true\n           });\n       }\n       else{\n        this.setState({\n            prevButtonDisable: false\n        });\n       }\n\n       //At the end of the quiz, the next button is disabled\n       if (this.state.nextQuestion === undefined || this.state.currentQuestionIndex+1 === this.state.numberOfQuestions){\n        this.setState({\n            nextButtonDisabled: true\n        });\n    }\n    else{\n     this.setState({\n         nextButtonDisabled: false\n     });\n    }\n   }\n\n   //this fuunction is handling the end of the quiz\n   endQuiz =() =>{\n       //alert will be displayed\n       alert('Quiz has ended!!');\n       const {state} = this;\n\n       //updatting states at the end of the quiz\n       const playStarts = {\n           score:state.score,\n           numberOfQuestions:state.componentDidMount,\n           numberOfAnsweredQuestions:state.numberOfAnsweredQuestions,\n           correctAnswers: state.correctAnswers,\n           wrongAnswers: state.wrongAnswers,\n           usedFiftyfifty : 2-state.fiftyfifty,\n           usedHints: 5-state.hints\n           \n\n       };\n       //after user finish the quiz or after timer is up, summary page will be dispalyed\n       setTimeout(()=>{\n            this.props.history.push('/play/quizsummary', playStarts);\n       }, 1000)\n   }\n\n   //render method where this class component returns the UI\n    render() {\n        \n        const { \n            curentQuestion, \n            currentQuestionIndex, \n            numberOfQuestions, \n            hints, \n            fiftyfifty,\n            time\n        \n        } = this.state;\n        return (\n\n            /*\n            This functional component is the main page of the quiz app\n            Things I used,\n                1. Fragments - to group a list of children without adding extra nodes to the DOM.\n                2. React Helmet - to manage the document head. \n                    It works in a browser and supports rendering on a server,\n                    dynamically set the page title, language, and metadata\n\n            Most of the div tags have classnames for styling purposes\n            */\n\n            <Fragment>\n                <Helmet><title>Quiz Page</title></Helmet>\n            <Fragment>\n                    {/**Audio clips */}\n                    <audio id=\"correct-sound\" src={Correct }></audio>\n                    <audio id=\"wrong-sound\" src={Wrong }></audio>\n                    <audio id=\"click-sound\" src={Clicking }></audio>\n            </Fragment>\n\n                <div className=\"quections\">\n                    <h2>Quiz mode</h2>\n\n                    {/* lifeline container */}\n                    <div className=\"lifeline-container\">\n                         {/*50-50 icon and assiging its methods */}\n                        <p>\n                            <FaAllergies onClick={this.handleFiftyFifty} className=\"lifeline\"></FaAllergies>\n                            {fiftyfifty}\n                        </p>\n\n                          {/*Hintsicon and assiging its methods */}\n                        <p>\n                            <FaMedapps onClick={this.handleHints} className=\"hints\" ></FaMedapps>{hints}\n                         </p>\n\n                    </div>\n\n                    {/* remaining number of quections  */}\n                    <div>\n                        <p className=\"timer-container\">\n\n                        <span className=\"left\" style={{float: 'left'}}>{currentQuestionIndex +1} of {numberOfQuestions}</span>\n                            <span className=\"clock\" style={{float: 'right'}}>{time.minutes}:{time.seconds}<span><FaRegClock></FaRegClock></span></span>    \n                        </p>\n                    </div>\n\n                    {/* current question number : total number of questions */}\n                    <h3>{curentQuestion.question}</h3>\n\n                     {/* Displaying for options */}\n                    <div className=\"options-container\">\n                         <p onClick={this.handleOption} className=\"option\">{curentQuestion.optionA}</p>\n                         <p onClick={this.handleOption} className=\"option\">{curentQuestion.optionB}</p>\n                    </div>\n                    <div className=\"options-container\">\n                         <p onClick={this.handleOption} className=\"option\">{curentQuestion.optionC}</p> \n                         <p onClick={this.handleOption} className=\"option\">{curentQuestion.optionD}</p>\n                    </div>\n\n                    {/**Button container for next ,previous,quite buttons*/}\n                    <div className=\"button-container\">\n                        <button \n                        className ={classNames('',{'disable':this.state.prevButtonDisable})}\n                        id=\"prev-btn\" \n                        onClick ={this.handleButtonClick}> \n                        Previous\n                        </button>\n\n                        <button \n                        className ={classNames('',{'disable':this.state.nextButtonDisabled})}\n                        id=\"nxt-btn\"  \n                        onClick ={this.handleButtonClick}>\n                        Next\n                        </button>\n\n                        <button \n                        id=\"quit-btn\" \n                        onClick ={this.handleButtonClick}>\n                        Quit\n                        </button>\n                    </div>\n\n\n                </div>\n            </Fragment>\n        )\n    }\n} \nexport default Play;","import React, { Component, Fragment } from 'react'\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\n\n//font awesom icons\nimport { FaRegBookmark } from 'react-icons/fa';\nimport{ FaCheck } from 'react-icons/fa';\n\nclass QuizSummary extends Component {\n    constructor (props){\n        super(props);\n        this.state ={\n            score:0,\n            numberOfQuestions:0,\n            numberOfAnsweredQuestions:0,\n            correctAnswers:0,\n            wrongAnswers:0,\n            usedHints:0,\n            usedFiftyFifty:0\n\n        };\n    }\n    //seting the sate from play.js\n    componentDidMount()\n    {\n        //pulling out the state from the location objecr just to reduce the code!\n        // this is the another way to do this : const { score, numberOfQuestions, numberOfAnsweredQuestions,correctAnswers,wrongAnswers,usedHints,usedFiftyFifty } = this.state;\n        const { state, score } =this.props.location;\n        this.setState({\n\n            score: (state.score / state.numberOfQuestions) *100,\n            numberOfQuestions:state.numberOfQuestions,\n            numberOfAnsweredQuestions:state.numberOfAnsweredQuestions,\n            correctAnswers: state.correctAnswers,\n            wrongAnswers: state.wrongAnswers,\n            usedHints:state.usedHints ,\n            usedFiftyFifty:state.usedFiftyFifty\n        });\n    }\n    render() {\n\n        //destructoring the state usig location object\n        const { state, score } =this.props.location;\n        let stats,remark;\n        const userScore = this.state.score;\n\n        //Check how many marks user got and setting a unigue message(stat)\n        if (userScore <=30){\n            remark ='You need more practice!';\n        }else if (userScore >30 && userScore <= 50){\n            remark ='Better next time!!';\n        }else if (userScore<=70 && userScore>50){\n            remark ='You can do better!';\n        }else if(userScore >= 71 && userScore<=84){\n            remark ='Great Job!! :D';\n        }else if (userScore >84){\n            remark ='Genius!!!'\n        }\n\n\n        //if user has completed a quiz\n        // includes lables in the summary page with output of the quiz\n        if(state!== undefined){\n           stats=(\n               <Fragment>\n                  <div style={{textAlign:\"center\"}}>\n                 <FaCheck className=\"sumicon\"></FaCheck>\n                </div>\n\n               <h1 className=\"sumr-h1\"> Quiz has ended.</h1>\n\n               <div className =\"conatiner\">\n\n            \n           <h4>{remark}</h4>\n\n          \n           <h2>Your Score:46%</h2>\n           <div classname=\"list\">\n           <span className=\"stat left\">Total number of questions:</span>\n           <span className=\"right\">15</span>\n           <br/>\n           <span className=\"stat left\">Total number of answered questions:</span>\n           <span className=\"right\">{this.state.numberOfAnsweredQuestions-1}</span>\n           <br/>\n           <span className=\"sp\">Total number of correct answers:</span>\n           <span className=\"right\">{this.state.correctAnswers}</span>\n           <br/>\n           <span className=\"stat left\">Total number of wrong answers:</span>\n           <span className=\"right\">{this.state.wrongAnswers}</span>\n           </div>\n         <div>\n               <ul>\n                   <li>\n                       <Link className=\"left\"  style={{float: 'left'}} to=\"/\">Back to Home</Link>\n                   </li>\n                   <li>\n                       <Link className=\"right\" style={{float: 'right'}}to=\"/play/quiz\">Play Again</Link>\n                   </li>\n               </ul>\n           </div>\n\n               </div>\n               </Fragment>\n               \n           )\n\n        }else{\n           stats =(\n               <section>\n               <h1 className=\"no-stats\"> No Stats Available</h1>\n               <ul>\n                   <li>\n                       <Link to=\"/\">Back to Home</Link>\n                   </li>\n                   <li>\n                       <Link to=\"/play/quiz\">Play Again</Link>\n                   </li>\n               </ul>\n               </section>\n           )\n\n        }\n      \n        return (\n            \n            //setting the title of the page\n            <Fragment>\n                <Helmet><title>Summary - quiz app</title></Helmet>\n                {stats}\n             </Fragment>\n            \n        \n        )\n    }\n}\nexport default QuizSummary;\n","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport QuizInstructions from './components/quiz/QuizInstructions';\nimport Play from './components/quiz/Play';\nimport QuizSummary from './components/quiz/QuizSummary';\n\n {/*Routing funtion for pages \nusing exact key word will only render that particular comp*/}\nfunction App() {\n  return (\n \n    <Router>\n         <Route path=\"/\" exact component ={Home}/>\n         <Route path=\"/play/instructions\" exact component ={QuizInstructions}/>\n         <Route path=\"/play/quiz\" exact component ={Play}/>\n         <Route path=\"/play/quizsummary\" exact component ={QuizSummary}/>\n    </Router>\n   \n   \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}